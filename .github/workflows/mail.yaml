name: Deploy Prod

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2                 
  ECR_REPOSITORY: 650576187890.dkr.ecr.us-east-2.amazonaws.com/test     
  ECS_SERVICE: test-service         
  ECS_CLUSTER: test-cluster            
  ECS_TASK_DEFINITION: .github/workflows/prod-taskdefinition.json               
  CONTAINER_NAME: test-container  
  PORT: 4000

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Create or Update via Terraform
        uses: dflook/terraform-apply@v1
        with:
          path: terraform
          auto_approve: true
          variables: |
            container_port=${{ env.PORT }}
            host_port=${{ env.PORT }}
      
      - name: Get Updated ECS Task Definition After Terraform Apply
        id: ecs-task-def
        run: |
          task_def_arn=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[0].taskDefinition" --output text)
          task_def=$(aws ecs describe-task-definitions --task-definitions $task_def_arn --query "taskDefinition" --output json)
          echo "$task_def" > ${{ env.ECS_TASK_DEFINITION }}
          more .github/workflows/prod-taskdefinition.json  

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 650576187890.dkr.ecr.us-east-2.amazonaws.com
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Api service Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      

      - name: Deploy Amazon ECS task definition for API service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          